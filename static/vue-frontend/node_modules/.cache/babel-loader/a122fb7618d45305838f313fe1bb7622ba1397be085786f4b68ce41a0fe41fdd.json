{"ast":null,"code":"import { ref, onMounted, watch, computed } from 'vue';\nexport default {\n  name: 'DependencyGraph',\n  props: {\n    sbomData: {\n      type: Object,\n      required: true\n    }\n  },\n  setup(props) {\n    const graphContainer = ref(null);\n    const network = ref(null);\n    const selectedDepth = ref('2');\n    const graphData = computed(() => {\n      if (!props.sbomData || !props.sbomData.components) {\n        return {\n          nodes: [],\n          edges: []\n        };\n      }\n      const nodes = [];\n      const edges = [];\n      const components = props.sbomData.components || [];\n      const maxDepth = selectedDepth.value === 'all' ? Infinity : parseInt(selectedDepth.value);\n\n      // Apply depth filtering\n      const includedComponents = components.filter((_, index) => {\n        // In a real implementation, you would determine the depth of each component\n        // and filter based on maxDepth. For now, we'll include all components.\n        return index < 10 * maxDepth; // Just for demonstration\n      });\n\n      // Create nodes\n      includedComponents.forEach((component, index) => {\n        nodes.push({\n          id: index,\n          label: component.name || `Component ${index}`,\n          title: component.version ? `${component.name} v${component.version}` : component.name,\n          group: component.type || 'default'\n        });\n      });\n\n      // Create edges based on dependencies\n      includedComponents.forEach((component, index) => {\n        if (component.dependencies) {\n          component.dependencies.forEach(dep => {\n            const depIndex = components.findIndex(c => c.name === dep.name);\n            if (depIndex !== -1 && depIndex < includedComponents.length) {\n              edges.push({\n                from: index,\n                to: depIndex,\n                arrows: 'to'\n              });\n            }\n          });\n        }\n      });\n      return {\n        nodes,\n        edges\n      };\n    });\n    const createGraph = () => {\n      if (!graphContainer.value) return;\n      if (!window.vis) {\n        console.error('vis-network not loaded');\n        return;\n      }\n      const options = {\n        nodes: {\n          shape: 'dot',\n          size: 16,\n          font: {\n            size: 12,\n            color: '#000000'\n          },\n          borderWidth: 2\n        },\n        edges: {\n          width: 2,\n          smooth: {\n            type: 'continuous'\n          }\n        },\n        physics: {\n          stabilization: false,\n          barnesHut: {\n            gravitationalConstant: -80000,\n            springConstant: 0.001,\n            springLength: 200\n          }\n        },\n        layout: {\n          improvedLayout: true\n        }\n      };\n      if (network.value) {\n        network.value.destroy();\n      }\n      network.value = new window.vis.Network(graphContainer.value, graphData.value, options);\n    };\n\n    // Load vis-network from CDN\n    const loadVisNetwork = () => {\n      return new Promise(resolve => {\n        if (window.vis) {\n          resolve();\n          return;\n        }\n        const script = document.createElement('script');\n        script.src = 'https://unpkg.com/vis-network/standalone/umd/vis-network.min.js';\n        script.onload = () => resolve();\n        document.head.appendChild(script);\n      });\n    };\n    watch([selectedDepth, graphData], () => {\n      if (window.vis) {\n        createGraph();\n      }\n    });\n    onMounted(async () => {\n      await loadVisNetwork();\n      createGraph();\n    });\n    return {\n      graphContainer,\n      selectedDepth\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","watch","computed","name","props","sbomData","type","Object","required","setup","graphContainer","network","selectedDepth","graphData","components","nodes","edges","maxDepth","value","Infinity","parseInt","includedComponents","filter","_","index","forEach","component","push","id","label","title","version","group","dependencies","dep","depIndex","findIndex","c","length","from","to","arrows","createGraph","window","vis","console","error","options","shape","size","font","color","borderWidth","width","smooth","physics","stabilization","barnesHut","gravitationalConstant","springConstant","springLength","layout","improvedLayout","destroy","Network","loadVisNetwork","Promise","resolve","script","document","createElement","src","onload","head","appendChild"],"sources":["/Users/sangambiradar/Documents/syft-api/static/vue-frontend/src/components/DependencyGraph.vue"],"sourcesContent":["<template>\n  <div class=\"dependency-graph\">\n    <div class=\"graph-header\">\n      <h3>Dependency Graph</h3>\n      <div class=\"graph-filters\">\n        <select v-model=\"selectedDepth\" class=\"modern-input\">\n          <option value=\"1\">Depth 1</option>\n          <option value=\"2\">Depth 2</option>\n          <option value=\"3\">Depth 3</option>\n          <option value=\"all\">All Dependencies</option>\n        </select>\n      </div>\n    </div>\n    <div class=\"graph-container\" ref=\"graphContainer\"></div>\n    <div class=\"graph-legend\">\n      <div class=\"legend-item\">\n        <div class=\"legend-color package\"></div>\n        <span>Package</span>\n      </div>\n      <div class=\"legend-item\">\n        <div class=\"legend-color dependency\"></div>\n        <span>Dependency</span>\n      </div>\n      <div class=\"legend-item\">\n        <div class=\"legend-color vulnerability\"></div>\n        <span>Vulnerable</span>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { ref, onMounted, watch, computed } from 'vue';\n\nexport default {\n  name: 'DependencyGraph',\n  props: {\n    sbomData: {\n      type: Object,\n      required: true\n    }\n  },\n  setup(props) {\n    const graphContainer = ref(null);\n    const network = ref(null);\n    const selectedDepth = ref('2');\n\n    const graphData = computed(() => {\n      if (!props.sbomData || !props.sbomData.components) {\n        return { nodes: [], edges: [] };\n      }\n\n      const nodes = [];\n      const edges = [];\n      const components = props.sbomData.components || [];\n      const maxDepth = selectedDepth.value === 'all' ? Infinity : parseInt(selectedDepth.value);\n\n      // Apply depth filtering\n      const includedComponents = components.filter((_, index) => {\n        // In a real implementation, you would determine the depth of each component\n        // and filter based on maxDepth. For now, we'll include all components.\n        return index < 10 * maxDepth; // Just for demonstration\n      });\n\n      // Create nodes\n      includedComponents.forEach((component, index) => {\n        nodes.push({\n          id: index,\n          label: component.name || `Component ${index}`,\n          title: component.version ? `${component.name} v${component.version}` : component.name,\n          group: component.type || 'default'\n        });\n      });\n\n      // Create edges based on dependencies\n      includedComponents.forEach((component, index) => {\n        if (component.dependencies) {\n          component.dependencies.forEach(dep => {\n            const depIndex = components.findIndex(c => c.name === dep.name);\n            if (depIndex !== -1 && depIndex < includedComponents.length) {\n              edges.push({\n                from: index,\n                to: depIndex,\n                arrows: 'to'\n              });\n            }\n          });\n        }\n      });\n\n      return { nodes, edges };\n    });\n\n    const createGraph = () => {\n      if (!graphContainer.value) return;\n      \n      if (!window.vis) {\n        console.error('vis-network not loaded');\n        return;\n      }\n\n      const options = {\n        nodes: {\n          shape: 'dot',\n          size: 16,\n          font: {\n            size: 12,\n            color: '#000000'\n          },\n          borderWidth: 2\n        },\n        edges: {\n          width: 2,\n          smooth: {\n            type: 'continuous'\n          }\n        },\n        physics: {\n          stabilization: false,\n          barnesHut: {\n            gravitationalConstant: -80000,\n            springConstant: 0.001,\n            springLength: 200\n          }\n        },\n        layout: {\n          improvedLayout: true\n        }\n      };\n\n      if (network.value) {\n        network.value.destroy();\n      }\n\n      network.value = new window.vis.Network(\n        graphContainer.value,\n        graphData.value,\n        options\n      );\n    };\n\n    // Load vis-network from CDN\n    const loadVisNetwork = () => {\n      return new Promise((resolve) => {\n        if (window.vis) {\n          resolve();\n          return;\n        }\n\n        const script = document.createElement('script');\n        script.src = 'https://unpkg.com/vis-network/standalone/umd/vis-network.min.js';\n        script.onload = () => resolve();\n        document.head.appendChild(script);\n      });\n    };\n\n    watch([selectedDepth, graphData], () => {\n      if (window.vis) {\n        createGraph();\n      }\n    });\n\n    onMounted(async () => {\n      await loadVisNetwork();\n      createGraph();\n    });\n\n    return {\n      graphContainer,\n      selectedDepth\n    };\n  }\n};\n</script>\n\n<style scoped>\n.dependency-graph {\n  background: white;\n  border-radius: 12px;\n  padding: 1.5rem;\n  box-shadow: var(--card-shadow);\n}\n\n.graph-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 1.5rem;\n}\n\n.graph-header h3 {\n  font-size: var(--font-size-xl);\n  font-weight: var(--font-weight-semibold);\n  color: var(--dark-color);\n}\n\n.graph-filters {\n  display: flex;\n  gap: 1rem;\n}\n\n.graph-container {\n  height: 400px;\n  border: 1px solid var(--border-color);\n  border-radius: 8px;\n  overflow: hidden;\n}\n\n.graph-legend {\n  display: flex;\n  gap: 2rem;\n  margin-top: 1.5rem;\n  padding-top: 1.5rem;\n  border-top: 1px solid var(--border-color);\n}\n\n.legend-item {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n}\n\n.legend-color {\n  width: 16px;\n  height: 16px;\n  border-radius: 50%;\n}\n\n.legend-color.package {\n  background-color: var(--primary-color);\n}\n\n.legend-color.dependency {\n  background-color: var(--secondary-color);\n}\n\n.legend-color.vulnerability {\n  background-color: var(--danger-color);\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}