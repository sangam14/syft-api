{"ast":null,"code":"/**\n * Asset Loader Utility\n *\n * This utility provides functions to preload and manage external assets like\n * scripts, stylesheets, and images to improve application performance.\n */\n\n// Track loaded assets to prevent duplicate loading\nconst loadedAssets = new Map();\n\n/**\n * Preload a script with optimized loading strategy\n *\n * @param {string} src - Script URL to load\n * @param {Object} options - Loading options\n * @param {boolean} options.async - Whether to load the script asynchronously\n * @param {boolean} options.defer - Whether to defer script loading\n * @param {string} options.integrity - Integrity hash for the script\n * @param {Function} options.onLoad - Callback function when script loads\n * @returns {Promise} - Promise that resolves when the script is loaded\n */\nexport function preloadScript(src, options = {}) {\n  const {\n    async = true,\n    defer = true,\n    integrity = '',\n    onLoad = null\n  } = options;\n\n  // Return existing promise if script is already loading\n  if (loadedAssets.has(src)) {\n    return loadedAssets.get(src);\n  }\n  const loadPromise = new Promise((resolve, reject) => {\n    // Check if script is already in the document\n    const existingScript = document.querySelector(`script[src=\"${src}\"]`);\n    if (existingScript) {\n      resolve();\n      return;\n    }\n\n    // Create and configure script element\n    const script = document.createElement('script');\n    script.src = src;\n    script.async = async;\n    script.defer = defer;\n    if (integrity) {\n      script.integrity = integrity;\n      script.crossOrigin = 'anonymous';\n    }\n\n    // Set up event handlers\n    script.onload = () => {\n      if (onLoad && typeof onLoad === 'function') {\n        onLoad();\n      }\n      resolve();\n    };\n    script.onerror = () => {\n      loadedAssets.delete(src);\n      reject(new Error(`Failed to load script: ${src}`));\n    };\n\n    // Add script to document\n    document.head.appendChild(script);\n  });\n\n  // Store promise in cache\n  loadedAssets.set(src, loadPromise);\n  return loadPromise;\n}\n\n/**\n * Preload a stylesheet with optimized loading strategy\n *\n * @param {string} href - Stylesheet URL to load\n * @param {Object} options - Loading options\n * @param {string} options.media - Media attribute for the stylesheet\n * @param {string} options.integrity - Integrity hash for the stylesheet\n * @returns {Promise} - Promise that resolves when the stylesheet is loaded\n */\nexport function preloadStylesheet(href, options = {}) {\n  const {\n    media = 'all',\n    integrity = ''\n  } = options;\n\n  // Return existing promise if stylesheet is already loading\n  if (loadedAssets.has(href)) {\n    return loadedAssets.get(href);\n  }\n  const loadPromise = new Promise((resolve, reject) => {\n    // Check if stylesheet is already in the document\n    const existingLink = document.querySelector(`link[href=\"${href}\"]`);\n    if (existingLink) {\n      resolve();\n      return;\n    }\n\n    // Create and configure link element\n    const link = document.createElement('link');\n    link.rel = 'stylesheet';\n    link.href = href;\n    link.media = media;\n    if (integrity) {\n      link.integrity = integrity;\n      link.crossOrigin = 'anonymous';\n    }\n\n    // Set up event handlers\n    link.onload = () => resolve();\n    link.onerror = () => {\n      loadedAssets.delete(href);\n      reject(new Error(`Failed to load stylesheet: ${href}`));\n    };\n\n    // Add link to document\n    document.head.appendChild(link);\n  });\n\n  // Store promise in cache\n  loadedAssets.set(href, loadPromise);\n  return loadPromise;\n}\n\n/**\n * Preload an image to cache it for later use\n *\n * @param {string} src - Image URL to preload\n * @returns {Promise} - Promise that resolves when the image is loaded\n */\nexport function preloadImage(src) {\n  // Return existing promise if image is already loading\n  if (loadedAssets.has(src)) {\n    return loadedAssets.get(src);\n  }\n  const loadPromise = new Promise((resolve, reject) => {\n    const img = new Image();\n    img.onload = () => resolve(img);\n    img.onerror = () => {\n      loadedAssets.delete(src);\n      reject(new Error(`Failed to load image: ${src}`));\n    };\n    img.src = src;\n  });\n\n  // Store promise in cache\n  loadedAssets.set(src, loadPromise);\n  return loadPromise;\n}\n\n/**\n * Preload multiple assets in parallel\n *\n * @param {Array} assets - Array of asset objects to preload\n * @returns {Promise} - Promise that resolves when all assets are loaded\n */\nexport function preloadAssets(assets) {\n  const promises = assets.map(asset => {\n    switch (asset.type) {\n      case 'script':\n        return preloadScript(asset.src, asset.options);\n      case 'stylesheet':\n        return preloadStylesheet(asset.href, asset.options);\n      case 'image':\n        return preloadImage(asset.src);\n      default:\n        return Promise.reject(new Error(`Unknown asset type: ${asset.type}`));\n    }\n  });\n  return Promise.all(promises);\n}\n\n/**\n * Check if an asset is already loaded\n *\n * @param {string} src - Asset URL to check\n * @returns {boolean} - Whether the asset is loaded\n */\nexport function isAssetLoaded(src) {\n  return loadedAssets.has(src) && loadedAssets.get(src).status === 'fulfilled';\n}\n\n/**\n * Clear the asset cache\n */\nexport function clearAssetCache() {\n  loadedAssets.clear();\n}\nexport default {\n  preloadScript,\n  preloadStylesheet,\n  preloadImage,\n  preloadAssets,\n  isAssetLoaded,\n  clearAssetCache\n};","map":{"version":3,"names":["loadedAssets","Map","preloadScript","src","options","async","defer","integrity","onLoad","has","get","loadPromise","Promise","resolve","reject","existingScript","document","querySelector","script","createElement","crossOrigin","onload","onerror","delete","Error","head","appendChild","set","preloadStylesheet","href","media","existingLink","link","rel","preloadImage","img","Image","preloadAssets","assets","promises","map","asset","type","all","isAssetLoaded","status","clearAssetCache","clear"],"sources":["/Users/sangambiradar/Documents/syft-api/static/vue-frontend/src/utils/assetLoader.js"],"sourcesContent":["/**\n * Asset Loader Utility\n *\n * This utility provides functions to preload and manage external assets like\n * scripts, stylesheets, and images to improve application performance.\n */\n\n// Track loaded assets to prevent duplicate loading\nconst loadedAssets = new Map();\n\n/**\n * Preload a script with optimized loading strategy\n *\n * @param {string} src - Script URL to load\n * @param {Object} options - Loading options\n * @param {boolean} options.async - Whether to load the script asynchronously\n * @param {boolean} options.defer - Whether to defer script loading\n * @param {string} options.integrity - Integrity hash for the script\n * @param {Function} options.onLoad - Callback function when script loads\n * @returns {Promise} - Promise that resolves when the script is loaded\n */\nexport function preloadScript(src, options = {}) {\n  const {\n    async = true,\n    defer = true,\n    integrity = '',\n    onLoad = null\n  } = options;\n\n  // Return existing promise if script is already loading\n  if (loadedAssets.has(src)) {\n    return loadedAssets.get(src);\n  }\n\n  const loadPromise = new Promise((resolve, reject) => {\n    // Check if script is already in the document\n    const existingScript = document.querySelector(`script[src=\"${src}\"]`);\n    if (existingScript) {\n      resolve();\n      return;\n    }\n\n    // Create and configure script element\n    const script = document.createElement('script');\n    script.src = src;\n    script.async = async;\n    script.defer = defer;\n\n    if (integrity) {\n      script.integrity = integrity;\n      script.crossOrigin = 'anonymous';\n    }\n\n    // Set up event handlers\n    script.onload = () => {\n      if (onLoad && typeof onLoad === 'function') {\n        onLoad();\n      }\n      resolve();\n    };\n\n    script.onerror = () => {\n      loadedAssets.delete(src);\n      reject(new Error(`Failed to load script: ${src}`));\n    };\n\n    // Add script to document\n    document.head.appendChild(script);\n  });\n\n  // Store promise in cache\n  loadedAssets.set(src, loadPromise);\n  return loadPromise;\n}\n\n/**\n * Preload a stylesheet with optimized loading strategy\n *\n * @param {string} href - Stylesheet URL to load\n * @param {Object} options - Loading options\n * @param {string} options.media - Media attribute for the stylesheet\n * @param {string} options.integrity - Integrity hash for the stylesheet\n * @returns {Promise} - Promise that resolves when the stylesheet is loaded\n */\nexport function preloadStylesheet(href, options = {}) {\n  const {\n    media = 'all',\n    integrity = ''\n  } = options;\n\n  // Return existing promise if stylesheet is already loading\n  if (loadedAssets.has(href)) {\n    return loadedAssets.get(href);\n  }\n\n  const loadPromise = new Promise((resolve, reject) => {\n    // Check if stylesheet is already in the document\n    const existingLink = document.querySelector(`link[href=\"${href}\"]`);\n    if (existingLink) {\n      resolve();\n      return;\n    }\n\n    // Create and configure link element\n    const link = document.createElement('link');\n    link.rel = 'stylesheet';\n    link.href = href;\n    link.media = media;\n\n    if (integrity) {\n      link.integrity = integrity;\n      link.crossOrigin = 'anonymous';\n    }\n\n    // Set up event handlers\n    link.onload = () => resolve();\n    link.onerror = () => {\n      loadedAssets.delete(href);\n      reject(new Error(`Failed to load stylesheet: ${href}`));\n    };\n\n    // Add link to document\n    document.head.appendChild(link);\n  });\n\n  // Store promise in cache\n  loadedAssets.set(href, loadPromise);\n  return loadPromise;\n}\n\n/**\n * Preload an image to cache it for later use\n *\n * @param {string} src - Image URL to preload\n * @returns {Promise} - Promise that resolves when the image is loaded\n */\nexport function preloadImage(src) {\n  // Return existing promise if image is already loading\n  if (loadedAssets.has(src)) {\n    return loadedAssets.get(src);\n  }\n\n  const loadPromise = new Promise((resolve, reject) => {\n    const img = new Image();\n    img.onload = () => resolve(img);\n    img.onerror = () => {\n      loadedAssets.delete(src);\n      reject(new Error(`Failed to load image: ${src}`));\n    };\n    img.src = src;\n  });\n\n  // Store promise in cache\n  loadedAssets.set(src, loadPromise);\n  return loadPromise;\n}\n\n/**\n * Preload multiple assets in parallel\n *\n * @param {Array} assets - Array of asset objects to preload\n * @returns {Promise} - Promise that resolves when all assets are loaded\n */\nexport function preloadAssets(assets) {\n  const promises = assets.map(asset => {\n    switch (asset.type) {\n      case 'script':\n        return preloadScript(asset.src, asset.options);\n      case 'stylesheet':\n        return preloadStylesheet(asset.href, asset.options);\n      case 'image':\n        return preloadImage(asset.src);\n      default:\n        return Promise.reject(new Error(`Unknown asset type: ${asset.type}`));\n    }\n  });\n\n  return Promise.all(promises);\n}\n\n/**\n * Check if an asset is already loaded\n *\n * @param {string} src - Asset URL to check\n * @returns {boolean} - Whether the asset is loaded\n */\nexport function isAssetLoaded(src) {\n  return loadedAssets.has(src) && loadedAssets.get(src).status === 'fulfilled';\n}\n\n/**\n * Clear the asset cache\n */\nexport function clearAssetCache() {\n  loadedAssets.clear();\n}\n\nexport default {\n  preloadScript,\n  preloadStylesheet,\n  preloadImage,\n  preloadAssets,\n  isAssetLoaded,\n  clearAssetCache\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}