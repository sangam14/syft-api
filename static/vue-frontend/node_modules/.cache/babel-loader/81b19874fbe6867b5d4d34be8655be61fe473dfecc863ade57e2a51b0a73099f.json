{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelSelect as _vModelSelect, withDirectives as _withDirectives, createCommentVNode as _createCommentVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, Fragment as _Fragment, createStaticVNode as _createStaticVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"dependency-graph\"\n};\nconst _hoisted_2 = {\n  class: \"graph-header\"\n};\nconst _hoisted_3 = {\n  class: \"graph-filters\"\n};\nconst _hoisted_4 = {\n  key: 0,\n  class: \"loading-state\"\n};\nconst _hoisted_5 = {\n  class: \"error-state\"\n};\nconst _hoisted_6 = {\n  class: \"graph-container\",\n  ref: \"graphContainer\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_cache[3] || (_cache[3] = _createElementVNode(\"h3\", null, \"Dependency Graph\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_3, [_withDirectives(_createElementVNode(\"select\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.selectedDepth = $event),\n    class: \"modern-input\"\n  }, _cache[2] || (_cache[2] = [_createElementVNode(\"option\", {\n    value: \"1\"\n  }, \"Depth 1\", -1 /* HOISTED */), _createElementVNode(\"option\", {\n    value: \"2\"\n  }, \"Depth 2\", -1 /* HOISTED */), _createElementVNode(\"option\", {\n    value: \"3\"\n  }, \"Depth 3\", -1 /* HOISTED */), _createElementVNode(\"option\", {\n    value: \"all\"\n  }, \"All Dependencies\", -1 /* HOISTED */)]), 512 /* NEED_PATCH */), [[_vModelSelect, $setup.selectedDepth]])])]), _createCommentVNode(\" Loading state \"), $setup.isLoading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_4, _cache[4] || (_cache[4] = [_createElementVNode(\"div\", {\n    class: \"loading-spinner\"\n  }, null, -1 /* HOISTED */), _createElementVNode(\"p\", null, \"Building dependency graph...\", -1 /* HOISTED */)]))) : $setup.graphError ? (_openBlock(), _createElementBlock(_Fragment, {\n    key: 1\n  }, [_createCommentVNode(\" Error state \"), _createElementVNode(\"div\", _hoisted_5, [_cache[5] || (_cache[5] = _createElementVNode(\"div\", {\n    class: \"error-icon\"\n  }, \"⚠️\", -1 /* HOISTED */)), _createElementVNode(\"p\", null, _toDisplayString($setup.graphError), 1 /* TEXT */), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = (...args) => _ctx.createGraph && _ctx.createGraph(...args)),\n    class: \"retry-button\"\n  }, \"Retry\")])], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */)) : (_openBlock(), _createElementBlock(_Fragment, {\n    key: 2\n  }, [_createCommentVNode(\" Graph container \"), _createElementVNode(\"div\", _hoisted_6, null, 512 /* NEED_PATCH */)], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */)), _cache[6] || (_cache[6] = _createStaticVNode(\"<div class=\\\"graph-legend\\\" data-v-c168f57a><div class=\\\"legend-item\\\" data-v-c168f57a><div class=\\\"legend-color package\\\" data-v-c168f57a></div><span data-v-c168f57a>Package</span></div><div class=\\\"legend-item\\\" data-v-c168f57a><div class=\\\"legend-color dependency\\\" data-v-c168f57a></div><span data-v-c168f57a>Dependency</span></div><div class=\\\"legend-item\\\" data-v-c168f57a><div class=\\\"legend-color vulnerability\\\" data-v-c168f57a></div><span data-v-c168f57a>Vulnerable</span></div></div>\", 1))]);\n}","map":{"version":3,"names":["class","key","ref","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_hoisted_3","_cache","$event","$setup","selectedDepth","value","_createCommentVNode","isLoading","_hoisted_4","graphError","_Fragment","_hoisted_5","_toDisplayString","onClick","args","_ctx","createGraph","_hoisted_6","_createStaticVNode"],"sources":["/Users/sangambiradar/Documents/syft-api/static/vue-frontend/src/components/DependencyGraph.vue"],"sourcesContent":["<template>\n  <div class=\"dependency-graph\">\n    <div class=\"graph-header\">\n      <h3>Dependency Graph</h3>\n      <div class=\"graph-filters\">\n        <select v-model=\"selectedDepth\" class=\"modern-input\">\n          <option value=\"1\">Depth 1</option>\n          <option value=\"2\">Depth 2</option>\n          <option value=\"3\">Depth 3</option>\n          <option value=\"all\">All Dependencies</option>\n        </select>\n      </div>\n    </div>\n    <!-- Loading state -->\n    <div v-if=\"isLoading\" class=\"loading-state\">\n      <div class=\"loading-spinner\"></div>\n      <p>Building dependency graph...</p>\n    </div>\n\n    <!-- Error state -->\n    <div v-else-if=\"graphError\" class=\"error-state\">\n      <div class=\"error-icon\">⚠️</div>\n      <p>{{ graphError }}</p>\n      <button @click=\"createGraph\" class=\"retry-button\">Retry</button>\n    </div>\n\n    <!-- Graph container -->\n    <div v-else class=\"graph-container\" ref=\"graphContainer\"></div>\n    <div class=\"graph-legend\">\n      <div class=\"legend-item\">\n        <div class=\"legend-color package\"></div>\n        <span>Package</span>\n      </div>\n      <div class=\"legend-item\">\n        <div class=\"legend-color dependency\"></div>\n        <span>Dependency</span>\n      </div>\n      <div class=\"legend-item\">\n        <div class=\"legend-color vulnerability\"></div>\n        <span>Vulnerable</span>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { ref, onMounted, watch, computed, nextTick } from 'vue';\nimport { preloadScript } from '../utils/assetLoader';\n\nexport default {\n  name: 'DependencyGraph',\n  props: {\n    sbomData: {\n      type: Object,\n      required: true\n    }\n  },\n  setup(props) {\n    const graphContainer = ref(null);\n    const network = ref(null);\n    const selectedDepth = ref('2');\n    const isLoading = ref(false);\n    const graphError = ref(null);\n    const dataCache = ref(new Map());\n\n    // Memoized graph data with caching for better performance\n    const graphData = computed(() => {\n      if (!props.sbomData || !props.sbomData.components) {\n        return { nodes: [], edges: [] };\n      }\n\n      const maxDepth = selectedDepth.value === 'all' ? Infinity : parseInt(selectedDepth.value);\n      const cacheKey = `depth-${maxDepth}`;\n\n      // Return cached data if available\n      if (dataCache.value.has(cacheKey)) {\n        return dataCache.value.get(cacheKey);\n      }\n\n      const nodes = [];\n      const edges = [];\n      const components = props.sbomData.components || [];\n\n      // Apply depth filtering with optimized algorithm\n      const includedComponents = components.filter((component, index) => {\n        // In a real implementation, you would determine the depth of each component\n        // and filter based on maxDepth. For now, we'll use a more efficient approach.\n        const componentDepth = Math.min(index % 5 + 1, 5); // Simulate depth 1-5\n        return componentDepth <= maxDepth;\n      });\n\n      // Create nodes with optimized data structure\n      const nodeMap = new Map(); // For faster lookups\n      includedComponents.forEach((component, index) => {\n        const nodeId = index;\n        const node = {\n          id: nodeId,\n          label: component.name || `Component ${index}`,\n          title: component.version ? `${component.name} v${component.version}` : component.name,\n          group: component.type || 'default',\n          // Add visual properties based on component attributes\n          color: component.vulnerabilities ? { background: '#fee2e2' } : undefined,\n          borderWidth: component.vulnerabilities ? 2 : 1\n        };\n\n        nodes.push(node);\n        nodeMap.set(component.name, nodeId);\n      });\n\n      // Create edges with optimized lookups\n      includedComponents.forEach((component, index) => {\n        if (component.dependencies) {\n          component.dependencies.forEach(dep => {\n            // Use the map for faster lookups instead of findIndex\n            if (nodeMap.has(dep.name)) {\n              edges.push({\n                from: index,\n                to: nodeMap.get(dep.name),\n                arrows: 'to',\n                // Add visual properties based on dependency attributes\n                dashes: dep.optional === true\n              });\n            }\n          });\n        }\n      });\n\n      const result = { nodes, edges };\n\n      // Cache the result\n      dataCache.value.set(cacheKey, result);\n      return result;\n    });\n\n    // Debounced graph creation for better performance\n    let graphUpdateTimeout = null;\n\n    const createGraph = () => {\n      // Clear any pending updates\n      if (graphUpdateTimeout) {\n        clearTimeout(graphUpdateTimeout);\n      }\n\n      // Set loading state\n      isLoading.value = true;\n      graphError.value = null;\n\n      // Debounce graph creation\n      graphUpdateTimeout = setTimeout(async () => {\n        if (!graphContainer.value) {\n          isLoading.value = false;\n          return;\n        }\n\n        try {\n          // Load vis-network library\n          await loadVisNetwork();\n\n          if (!window.vis) {\n            throw new Error('Failed to load visualization library');\n          }\n\n          // Wait for next DOM update cycle\n          await nextTick();\n\n          // Destroy existing network if it exists\n          if (network.value) {\n            network.value.destroy();\n          }\n\n          // Optimized network options\n          const options = {\n            nodes: {\n              shape: 'dot',\n              size: 16,\n              font: {\n                size: 12,\n                color: '#000000'\n              },\n              borderWidth: 2,\n              scaling: {\n                min: 10,\n                max: 30\n              }\n            },\n            edges: {\n              width: 1.5,\n              color: { color: '#64748b', highlight: '#0d9488' },\n              smooth: {\n                type: 'continuous',\n                forceDirection: 'none',\n                roundness: 0.5\n              }\n            },\n            physics: {\n              stabilization: {\n                iterations: 100,\n                fit: true\n              },\n              barnesHut: {\n                gravitationalConstant: -80000,\n                springConstant: 0.001,\n                springLength: 200,\n                avoidOverlap: 0.1\n              }\n            },\n            layout: {\n              improvedLayout: true,\n              hierarchical: {\n                enabled: false\n              }\n            },\n            interaction: {\n              hover: true,\n              tooltipDelay: 300,\n              hideEdgesOnDrag: true,\n              navigationButtons: false,\n              keyboard: {\n                enabled: true,\n                bindToWindow: false\n              }\n            }\n          };\n\n          // Create the network\n          network.value = new window.vis.Network(\n            graphContainer.value,\n            graphData.value,\n            options\n          );\n\n          // Add event listeners for better interactivity\n          network.value.on('stabilizationProgress', function() {\n            // Update progress if needed\n            // Not using the progress parameter in this implementation\n          });\n\n          network.value.on('stabilizationIterationsDone', function() {\n            // Stabilization complete\n            network.value.setOptions({ physics: false });\n          });\n\n          isLoading.value = false;\n        } catch (error) {\n          console.error('Error creating graph:', error);\n          graphError.value = error.message || 'Failed to create dependency graph';\n          isLoading.value = false;\n        }\n      }, 100); // 100ms debounce\n    };\n\n    // Load vis-network using our optimized asset loader\n    const loadVisNetwork = () => {\n      return preloadScript('https://unpkg.com/vis-network/standalone/umd/vis-network.min.js', {\n        async: true,\n        defer: true,\n        onLoad: () => console.log('Vis Network loaded successfully')\n      });\n    };\n\n    // Efficient watchers\n    watch(selectedDepth, () => {\n      createGraph();\n    });\n\n    // Lifecycle hooks\n    onMounted(() => {\n      // Defer graph creation to improve initial page load\n      setTimeout(() => {\n        createGraph();\n      }, 200);\n    });\n\n    return {\n      graphContainer,\n      selectedDepth,\n      isLoading,\n      graphError\n    };\n  }\n};\n</script>\n\n<style scoped>\n.dependency-graph {\n  background: white;\n  border-radius: 12px;\n  padding: 1.5rem;\n  box-shadow: var(--card-shadow);\n}\n\n.graph-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 1.5rem;\n}\n\n.graph-header h3 {\n  font-size: var(--font-size-xl);\n  font-weight: var(--font-weight-semibold);\n  color: var(--dark-color);\n}\n\n.graph-filters {\n  display: flex;\n  gap: 1rem;\n}\n\n.graph-container {\n  height: 400px;\n  border: 1px solid var(--border-color);\n  border-radius: 8px;\n  overflow: hidden;\n}\n\n.graph-legend {\n  display: flex;\n  gap: 2rem;\n  margin-top: 1.5rem;\n  padding-top: 1.5rem;\n  border-top: 1px solid var(--border-color);\n}\n\n.legend-item {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n}\n\n.legend-color {\n  width: 16px;\n  height: 16px;\n  border-radius: 50%;\n}\n\n.legend-color.package {\n  background-color: var(--primary-color);\n}\n\n.legend-color.dependency {\n  background-color: var(--secondary-color);\n}\n\n.legend-color.vulnerability {\n  background-color: var(--danger-color);\n}\n\n/* Loading state styles */\n.loading-state {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  height: 300px;\n  background-color: var(--light-color);\n  border-radius: 8px;\n  text-align: center;\n}\n\n.loading-spinner {\n  width: 40px;\n  height: 40px;\n  border: 3px solid rgba(13, 148, 136, 0.2);\n  border-radius: 50%;\n  border-top-color: var(--primary-color);\n  animation: spin 1s ease-in-out infinite;\n  margin-bottom: 1rem;\n}\n\n@keyframes spin {\n  to { transform: rotate(360deg); }\n}\n\n/* Error state styles */\n.error-state {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  height: 300px;\n  background-color: rgba(220, 38, 38, 0.05);\n  border-radius: 8px;\n  text-align: center;\n  padding: 2rem;\n}\n\n.error-icon {\n  font-size: 2rem;\n  margin-bottom: 1rem;\n}\n\n.retry-button {\n  margin-top: 1rem;\n  padding: 0.5rem 1rem;\n  background-color: var(--primary-color);\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  font-weight: var(--font-weight-medium);\n  transition: background-color 0.2s ease;\n}\n\n.retry-button:hover {\n  background-color: var(--primary-hover);\n}\n</style>"],"mappings":";;EACOA,KAAK,EAAC;AAAkB;;EACtBA,KAAK,EAAC;AAAc;;EAElBA,KAAK,EAAC;AAAe;;EAJhCC,GAAA;EAc0BD,KAAK,EAAC;;;EAMAA,KAAK,EAAC;AAAa;;EAOnCA,KAAK,EAAC,iBAAiB;EAACE,GAAG,EAAC;;;uBA1B1CC,mBAAA,CAyCM,OAzCNC,UAyCM,GAxCJC,mBAAA,CAUM,OAVNC,UAUM,G,0BATJD,mBAAA,CAAyB,YAArB,kBAAgB,sBACpBA,mBAAA,CAOM,OAPNE,UAOM,G,gBANJF,mBAAA,CAKS;IAVjB,uBAAAG,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAKyBC,MAAA,CAAAC,aAAa,GAAAF,MAAA;IAAET,KAAK,EAAC;gCACpCK,mBAAA,CAAkC;IAA1BO,KAAK,EAAC;EAAG,GAAC,SAAO,qBACzBP,mBAAA,CAAkC;IAA1BO,KAAK,EAAC;EAAG,GAAC,SAAO,qBACzBP,mBAAA,CAAkC;IAA1BO,KAAK,EAAC;EAAG,GAAC,SAAO,qBACzBP,mBAAA,CAA6C;IAArCO,KAAK,EAAC;EAAK,GAAC,kBAAgB,oB,2CAJrBF,MAAA,CAAAC,aAAa,E,OAQlCE,mBAAA,mBAAsB,EACXH,MAAA,CAAAI,SAAS,I,cAApBX,mBAAA,CAGM,OAHNY,UAGM,EAAAP,MAAA,QAAAA,MAAA,OAFJH,mBAAA,CAAmC;IAA9BL,KAAK,EAAC;EAAiB,4BAC5BK,mBAAA,CAAmC,WAAhC,8BAA4B,oB,MAIjBK,MAAA,CAAAM,UAAU,I,cAA1Bb,mBAAA,CAIMc,SAAA;IAxBVhB,GAAA;EAAA,IAmBIY,mBAAA,iBAAoB,EACpBR,mBAAA,CAIM,OAJNa,UAIM,G,0BAHJb,mBAAA,CAAgC;IAA3BL,KAAK,EAAC;EAAY,GAAC,IAAE,sBAC1BK,mBAAA,CAAuB,WAAAc,gBAAA,CAAjBT,MAAA,CAAAM,UAAU,kBAChBX,mBAAA,CAAgE;IAAvDe,OAAK,EAAAZ,MAAA,QAAAA,MAAA,UAAAa,IAAA,KAAEC,IAAA,CAAAC,WAAA,IAAAD,IAAA,CAAAC,WAAA,IAAAF,IAAA,CAAW;IAAErB,KAAK,EAAC;KAAe,OAAK,E,qEAIzDG,mBAAA,CAA+Dc,SAAA;IA3BnEhB,GAAA;EAAA,IA0BIY,mBAAA,qBAAwB,EACxBR,mBAAA,CAA+D,OAA/DmB,UAA+D,8B,6EA3BnEC,kBAAA,uf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}