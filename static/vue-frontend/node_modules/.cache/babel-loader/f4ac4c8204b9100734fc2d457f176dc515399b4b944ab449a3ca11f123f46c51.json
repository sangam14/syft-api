{"ast":null,"code":"import { ref, onMounted, watch, computed, nextTick } from 'vue';\nimport { preloadScript } from '../utils/assetLoader';\nexport default {\n  name: 'DependencyGraph',\n  props: {\n    sbomData: {\n      type: Object,\n      required: true\n    }\n  },\n  setup(props) {\n    const graphContainer = ref(null);\n    const network = ref(null);\n    const selectedDepth = ref('2');\n    const isLoading = ref(false);\n    const graphError = ref(null);\n    const dataCache = ref(new Map());\n\n    // Memoized graph data with caching for better performance\n    const graphData = computed(() => {\n      if (!props.sbomData || !props.sbomData.components) {\n        return {\n          nodes: [],\n          edges: []\n        };\n      }\n      const maxDepth = selectedDepth.value === 'all' ? Infinity : parseInt(selectedDepth.value);\n      const cacheKey = `depth-${maxDepth}`;\n\n      // Return cached data if available\n      if (dataCache.value.has(cacheKey)) {\n        return dataCache.value.get(cacheKey);\n      }\n      const nodes = [];\n      const edges = [];\n      const components = props.sbomData.components || [];\n\n      // Apply depth filtering with optimized algorithm\n      const includedComponents = components.filter((component, index) => {\n        // In a real implementation, you would determine the depth of each component\n        // and filter based on maxDepth. For now, we'll use a more efficient approach.\n        const componentDepth = Math.min(index % 5 + 1, 5); // Simulate depth 1-5\n        return componentDepth <= maxDepth;\n      });\n\n      // Create nodes with optimized data structure\n      const nodeMap = new Map(); // For faster lookups\n      includedComponents.forEach((component, index) => {\n        const nodeId = index;\n        const node = {\n          id: nodeId,\n          label: component.name || `Component ${index}`,\n          title: component.version ? `${component.name} v${component.version}` : component.name,\n          group: component.type || 'default',\n          // Add visual properties based on component attributes\n          color: component.vulnerabilities ? {\n            background: '#fee2e2'\n          } : undefined,\n          borderWidth: component.vulnerabilities ? 2 : 1\n        };\n        nodes.push(node);\n        nodeMap.set(component.name, nodeId);\n      });\n\n      // Create edges with optimized lookups\n      includedComponents.forEach((component, index) => {\n        if (component.dependencies) {\n          component.dependencies.forEach(dep => {\n            // Use the map for faster lookups instead of findIndex\n            if (nodeMap.has(dep.name)) {\n              edges.push({\n                from: index,\n                to: nodeMap.get(dep.name),\n                arrows: 'to',\n                // Add visual properties based on dependency attributes\n                dashes: dep.optional === true\n              });\n            }\n          });\n        }\n      });\n      const result = {\n        nodes,\n        edges\n      };\n\n      // Cache the result\n      dataCache.value.set(cacheKey, result);\n      return result;\n    });\n\n    // Debounced graph creation for better performance\n    let graphUpdateTimeout = null;\n    const createGraph = () => {\n      // Clear any pending updates\n      if (graphUpdateTimeout) {\n        clearTimeout(graphUpdateTimeout);\n      }\n\n      // Set loading state\n      isLoading.value = true;\n      graphError.value = null;\n\n      // Debounce graph creation\n      graphUpdateTimeout = setTimeout(async () => {\n        if (!graphContainer.value) {\n          isLoading.value = false;\n          return;\n        }\n        try {\n          // Load vis-network library\n          await loadVisNetwork();\n          if (!window.vis) {\n            throw new Error('Failed to load visualization library');\n          }\n\n          // Wait for next DOM update cycle\n          await nextTick();\n\n          // Destroy existing network if it exists\n          if (network.value) {\n            network.value.destroy();\n          }\n\n          // Optimized network options\n          const options = {\n            nodes: {\n              shape: 'dot',\n              size: 16,\n              font: {\n                size: 12,\n                color: '#000000'\n              },\n              borderWidth: 2,\n              scaling: {\n                min: 10,\n                max: 30\n              }\n            },\n            edges: {\n              width: 1.5,\n              color: {\n                color: '#64748b',\n                highlight: '#0d9488'\n              },\n              smooth: {\n                type: 'continuous',\n                forceDirection: 'none',\n                roundness: 0.5\n              }\n            },\n            physics: {\n              stabilization: {\n                iterations: 100,\n                fit: true\n              },\n              barnesHut: {\n                gravitationalConstant: -80000,\n                springConstant: 0.001,\n                springLength: 200,\n                avoidOverlap: 0.1\n              }\n            },\n            layout: {\n              improvedLayout: true,\n              hierarchical: {\n                enabled: false\n              }\n            },\n            interaction: {\n              hover: true,\n              tooltipDelay: 300,\n              hideEdgesOnDrag: true,\n              navigationButtons: false,\n              keyboard: {\n                enabled: true,\n                bindToWindow: false\n              }\n            }\n          };\n\n          // Create the network\n          network.value = new window.vis.Network(graphContainer.value, graphData.value, options);\n\n          // Add event listeners for better interactivity\n          network.value.on('stabilizationProgress', function (params) {\n            // Update progress if needed\n          });\n          network.value.on('stabilizationIterationsDone', function () {\n            // Stabilization complete\n            network.value.setOptions({\n              physics: false\n            });\n          });\n          isLoading.value = false;\n        } catch (error) {\n          console.error('Error creating graph:', error);\n          graphError.value = error.message || 'Failed to create dependency graph';\n          isLoading.value = false;\n        }\n      }, 100); // 100ms debounce\n    };\n\n    // Load vis-network using our optimized asset loader\n    const loadVisNetwork = () => {\n      return preloadScript('https://unpkg.com/vis-network/standalone/umd/vis-network.min.js', {\n        async: true,\n        defer: true,\n        onLoad: () => console.log('Vis Network loaded successfully')\n      });\n    };\n\n    // Efficient watchers\n    watch(selectedDepth, () => {\n      createGraph();\n    });\n\n    // Lifecycle hooks\n    onMounted(() => {\n      // Defer graph creation to improve initial page load\n      setTimeout(() => {\n        createGraph();\n      }, 200);\n    });\n    return {\n      graphContainer,\n      selectedDepth,\n      isLoading,\n      graphError\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","watch","computed","nextTick","preloadScript","name","props","sbomData","type","Object","required","setup","graphContainer","network","selectedDepth","isLoading","graphError","dataCache","Map","graphData","components","nodes","edges","maxDepth","value","Infinity","parseInt","cacheKey","has","get","includedComponents","filter","component","index","componentDepth","Math","min","nodeMap","forEach","nodeId","node","id","label","title","version","group","color","vulnerabilities","background","undefined","borderWidth","push","set","dependencies","dep","from","to","arrows","dashes","optional","result","graphUpdateTimeout","createGraph","clearTimeout","setTimeout","loadVisNetwork","window","vis","Error","destroy","options","shape","size","font","scaling","max","width","highlight","smooth","forceDirection","roundness","physics","stabilization","iterations","fit","barnesHut","gravitationalConstant","springConstant","springLength","avoidOverlap","layout","improvedLayout","hierarchical","enabled","interaction","hover","tooltipDelay","hideEdgesOnDrag","navigationButtons","keyboard","bindToWindow","Network","on","params","setOptions","error","console","message","async","defer","onLoad","log"],"sources":["/Users/sangambiradar/Documents/syft-api/static/vue-frontend/src/components/DependencyGraph.vue"],"sourcesContent":["<template>\n  <div class=\"dependency-graph\">\n    <div class=\"graph-header\">\n      <h3>Dependency Graph</h3>\n      <div class=\"graph-filters\">\n        <select v-model=\"selectedDepth\" class=\"modern-input\">\n          <option value=\"1\">Depth 1</option>\n          <option value=\"2\">Depth 2</option>\n          <option value=\"3\">Depth 3</option>\n          <option value=\"all\">All Dependencies</option>\n        </select>\n      </div>\n    </div>\n    <!-- Loading state -->\n    <div v-if=\"isLoading\" class=\"loading-state\">\n      <div class=\"loading-spinner\"></div>\n      <p>Building dependency graph...</p>\n    </div>\n\n    <!-- Error state -->\n    <div v-else-if=\"graphError\" class=\"error-state\">\n      <div class=\"error-icon\">⚠️</div>\n      <p>{{ graphError }}</p>\n      <button @click=\"createGraph\" class=\"retry-button\">Retry</button>\n    </div>\n\n    <!-- Graph container -->\n    <div v-else class=\"graph-container\" ref=\"graphContainer\"></div>\n    <div class=\"graph-legend\">\n      <div class=\"legend-item\">\n        <div class=\"legend-color package\"></div>\n        <span>Package</span>\n      </div>\n      <div class=\"legend-item\">\n        <div class=\"legend-color dependency\"></div>\n        <span>Dependency</span>\n      </div>\n      <div class=\"legend-item\">\n        <div class=\"legend-color vulnerability\"></div>\n        <span>Vulnerable</span>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { ref, onMounted, watch, computed, nextTick } from 'vue';\nimport { preloadScript } from '../utils/assetLoader';\n\nexport default {\n  name: 'DependencyGraph',\n  props: {\n    sbomData: {\n      type: Object,\n      required: true\n    }\n  },\n  setup(props) {\n    const graphContainer = ref(null);\n    const network = ref(null);\n    const selectedDepth = ref('2');\n    const isLoading = ref(false);\n    const graphError = ref(null);\n    const dataCache = ref(new Map());\n\n    // Memoized graph data with caching for better performance\n    const graphData = computed(() => {\n      if (!props.sbomData || !props.sbomData.components) {\n        return { nodes: [], edges: [] };\n      }\n\n      const maxDepth = selectedDepth.value === 'all' ? Infinity : parseInt(selectedDepth.value);\n      const cacheKey = `depth-${maxDepth}`;\n\n      // Return cached data if available\n      if (dataCache.value.has(cacheKey)) {\n        return dataCache.value.get(cacheKey);\n      }\n\n      const nodes = [];\n      const edges = [];\n      const components = props.sbomData.components || [];\n\n      // Apply depth filtering with optimized algorithm\n      const includedComponents = components.filter((component, index) => {\n        // In a real implementation, you would determine the depth of each component\n        // and filter based on maxDepth. For now, we'll use a more efficient approach.\n        const componentDepth = Math.min(index % 5 + 1, 5); // Simulate depth 1-5\n        return componentDepth <= maxDepth;\n      });\n\n      // Create nodes with optimized data structure\n      const nodeMap = new Map(); // For faster lookups\n      includedComponents.forEach((component, index) => {\n        const nodeId = index;\n        const node = {\n          id: nodeId,\n          label: component.name || `Component ${index}`,\n          title: component.version ? `${component.name} v${component.version}` : component.name,\n          group: component.type || 'default',\n          // Add visual properties based on component attributes\n          color: component.vulnerabilities ? { background: '#fee2e2' } : undefined,\n          borderWidth: component.vulnerabilities ? 2 : 1\n        };\n\n        nodes.push(node);\n        nodeMap.set(component.name, nodeId);\n      });\n\n      // Create edges with optimized lookups\n      includedComponents.forEach((component, index) => {\n        if (component.dependencies) {\n          component.dependencies.forEach(dep => {\n            // Use the map for faster lookups instead of findIndex\n            if (nodeMap.has(dep.name)) {\n              edges.push({\n                from: index,\n                to: nodeMap.get(dep.name),\n                arrows: 'to',\n                // Add visual properties based on dependency attributes\n                dashes: dep.optional === true\n              });\n            }\n          });\n        }\n      });\n\n      const result = { nodes, edges };\n\n      // Cache the result\n      dataCache.value.set(cacheKey, result);\n      return result;\n    });\n\n    // Debounced graph creation for better performance\n    let graphUpdateTimeout = null;\n\n    const createGraph = () => {\n      // Clear any pending updates\n      if (graphUpdateTimeout) {\n        clearTimeout(graphUpdateTimeout);\n      }\n\n      // Set loading state\n      isLoading.value = true;\n      graphError.value = null;\n\n      // Debounce graph creation\n      graphUpdateTimeout = setTimeout(async () => {\n        if (!graphContainer.value) {\n          isLoading.value = false;\n          return;\n        }\n\n        try {\n          // Load vis-network library\n          await loadVisNetwork();\n\n          if (!window.vis) {\n            throw new Error('Failed to load visualization library');\n          }\n\n          // Wait for next DOM update cycle\n          await nextTick();\n\n          // Destroy existing network if it exists\n          if (network.value) {\n            network.value.destroy();\n          }\n\n          // Optimized network options\n          const options = {\n            nodes: {\n              shape: 'dot',\n              size: 16,\n              font: {\n                size: 12,\n                color: '#000000'\n              },\n              borderWidth: 2,\n              scaling: {\n                min: 10,\n                max: 30\n              }\n            },\n            edges: {\n              width: 1.5,\n              color: { color: '#64748b', highlight: '#0d9488' },\n              smooth: {\n                type: 'continuous',\n                forceDirection: 'none',\n                roundness: 0.5\n              }\n            },\n            physics: {\n              stabilization: {\n                iterations: 100,\n                fit: true\n              },\n              barnesHut: {\n                gravitationalConstant: -80000,\n                springConstant: 0.001,\n                springLength: 200,\n                avoidOverlap: 0.1\n              }\n            },\n            layout: {\n              improvedLayout: true,\n              hierarchical: {\n                enabled: false\n              }\n            },\n            interaction: {\n              hover: true,\n              tooltipDelay: 300,\n              hideEdgesOnDrag: true,\n              navigationButtons: false,\n              keyboard: {\n                enabled: true,\n                bindToWindow: false\n              }\n            }\n          };\n\n          // Create the network\n          network.value = new window.vis.Network(\n            graphContainer.value,\n            graphData.value,\n            options\n          );\n\n          // Add event listeners for better interactivity\n          network.value.on('stabilizationProgress', function(params) {\n            // Update progress if needed\n          });\n\n          network.value.on('stabilizationIterationsDone', function() {\n            // Stabilization complete\n            network.value.setOptions({ physics: false });\n          });\n\n          isLoading.value = false;\n        } catch (error) {\n          console.error('Error creating graph:', error);\n          graphError.value = error.message || 'Failed to create dependency graph';\n          isLoading.value = false;\n        }\n      }, 100); // 100ms debounce\n    };\n\n    // Load vis-network using our optimized asset loader\n    const loadVisNetwork = () => {\n      return preloadScript('https://unpkg.com/vis-network/standalone/umd/vis-network.min.js', {\n        async: true,\n        defer: true,\n        onLoad: () => console.log('Vis Network loaded successfully')\n      });\n    };\n\n    // Efficient watchers\n    watch(selectedDepth, () => {\n      createGraph();\n    });\n\n    // Lifecycle hooks\n    onMounted(() => {\n      // Defer graph creation to improve initial page load\n      setTimeout(() => {\n        createGraph();\n      }, 200);\n    });\n\n    return {\n      graphContainer,\n      selectedDepth,\n      isLoading,\n      graphError\n    };\n  }\n};\n</script>\n\n<style scoped>\n.dependency-graph {\n  background: white;\n  border-radius: 12px;\n  padding: 1.5rem;\n  box-shadow: var(--card-shadow);\n}\n\n.graph-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 1.5rem;\n}\n\n.graph-header h3 {\n  font-size: var(--font-size-xl);\n  font-weight: var(--font-weight-semibold);\n  color: var(--dark-color);\n}\n\n.graph-filters {\n  display: flex;\n  gap: 1rem;\n}\n\n.graph-container {\n  height: 400px;\n  border: 1px solid var(--border-color);\n  border-radius: 8px;\n  overflow: hidden;\n}\n\n.graph-legend {\n  display: flex;\n  gap: 2rem;\n  margin-top: 1.5rem;\n  padding-top: 1.5rem;\n  border-top: 1px solid var(--border-color);\n}\n\n.legend-item {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n}\n\n.legend-color {\n  width: 16px;\n  height: 16px;\n  border-radius: 50%;\n}\n\n.legend-color.package {\n  background-color: var(--primary-color);\n}\n\n.legend-color.dependency {\n  background-color: var(--secondary-color);\n}\n\n.legend-color.vulnerability {\n  background-color: var(--danger-color);\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}